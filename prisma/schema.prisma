generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For Neon database compatibility
}

model User {
  id               String             @id @default(cuid())
  clerkUserId      String             @unique
  email            String             @unique
  name             String?
  imageUrl         String?
  createdIssues    Issue[]            @relation("Reporter")
  assignedIssues   Issue[]            @relation("Assignee")
  comments         Comment[]
  messages         ChatMessage[]
  departmentMember DepartmentMember[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Project {
  id             String       @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String // This will store the Clerk organization ID
  sprints        Sprint[]
  issues         Issue[]
  departments    Department[]
  forms          Form[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, key])
}

model Department {
  id               String             @id @default(cuid())
  name             String
  description      String?
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String
  departmentHeadId String? // Clerk user ID for department head
  members          DepartmentMember[]
  issues           Issue[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([projectId, name])
}

// New model to represent department membership
model DepartmentMember {
  id           String     @id @default(cuid())
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  role         String?    // Optional role within the department
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([departmentId, userId])
}

model Sprint {
  id        String       @id @default(cuid())
  name      String       @unique
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  issues    Issue[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Issue {
  id           String            @id @default(cuid())
  title        String
  description  String?
  status       IssueStatus
  order        Int // This will store the order within its status column
  priority     IssuePriority
  assignee     User?             @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId   String?
  reporter     User              @relation("Reporter", fields: [reporterId], references: [id])
  reporterId   String
  project      Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  department   Department?       @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId String?
  sprint       Sprint?           @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId     String?
  comments     Comment[]
  conversation ChatConversation?
  analytics    IssueAnalytic?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([status, order])
  @@index([departmentId])
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

// Comments for issues
model Comment {
  id        String   @id @default(cuid())
  content   String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Chat conversations
model ChatConversation {
  id              String        @id @default(cuid())
  issue           Issue         @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId         String        @unique // One chat per issue
  messages        ChatMessage[]
  streamChannelId String? // For Stream API integration
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Chat messages
model ChatMessage {
  id             String           @id @default(cuid())
  content        String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User             @relation(fields: [senderId], references: [id])
  senderId       String
  read           Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Analytics data
model IssueAnalytic {
  id               String   @id @default(cuid())
  issue            Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId          String   @unique
  timeInTodo       Int      @default(0) // Time in seconds
  timeInProgress   Int      @default(0) // Time in seconds
  timeInReview     Int      @default(0) // Time in seconds
  completionTime   Int? // Total time to completion (null if not completed)
  statusChanges    Int      @default(0) // Number of status changes
  lastStatusChange DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Form models
model Form {
  id          String           @id @default(cuid())
  name        String
  description String?
  fields      Json // Store the form fields as JSON
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submissions FormSubmission[]
  views       FormView[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model FormSubmission {
  id        String   @id @default(cuid())
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  data      Json // Store the submitted form data as JSON
  userName  String? // Store name for identification
  userEmail String? // Store email for identification
  createdAt DateTime @default(now())
}

model FormView {
  id        String   @id @default(cuid())
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId    String? // Optional, for anonymous views
  userEmail String? // Store email for identification
  userName  String? // Store name for identification
  createdAt DateTime @default(now())
}
